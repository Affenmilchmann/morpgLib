from glob import glob
import matplotlib.pyplot as plt
from matplotlib.animation import FuncAnimation
from pyparsing import col

fig, ax = None, None
black = (0.0, 0.0, 0.0)
temp = (200/255, 30/255, 200/255)
gray = (0.5, 0.5, 0.5)
selected = (230/255, 10/255, 10/255)

def rmFrame():
    global ax
    # removing the frame
    ax.tick_params(axis='x', which='both', bottom=False,
                    top=False, labelbottom=False)
    ax.tick_params(axis='y', which='both', right=False,
                    left=False, labelleft=False)
    for pos in ['right', 'top', 'bottom', 'left']:
        ax.spines[pos].set_visible(False)

    ax.axis('equal')
    
def __reset(size=5):
    global ax
    global fig
    fig, ax = plt.subplots(figsize=(size, size))
    rmFrame()
    
__reset()
    
def __resetAx():
    global ax
    ax.clear()
    
def __drawLine(p1, p2, w=1, color=(0, 0, 0)):
    global ax
    x = [p1[0], p2[0]]
    y = [p1[1], p2[1]]
    ax.plot(x,y,color=color,linewidth=w)

def __drawBox(p1, p2, w=2, color=(0, 0, 0)):
    global ax
    x = [p1[0], p2[0], p2[0], p1[0], p1[0]]
    y = [p1[1], p1[1], p2[1], p2[1], p1[1]]
    ax.plot(x,y,color=color,linewidth=w)

def __drawSudokuFrame():
    for i in range(10):
        w = 3 if i % 3==0 else 1
        c = black if i % 3==0 else gray
        __drawLine((i, 0), (i, 9), w=w, color=c)
        __drawLine((0, i), (9, i), w=w, color=c)

def __drawSolvedDigit(x, y, digit=0, color=black):
    if not digit:
        return
    global ax
    ax.text(x + 0.5, y + 0.41, str(digit), fontsize=15, ha='center', va='center', color=color)

def __drawCandidates(x, y, candidates: tuple[int, list[int]]):
    cell_offset = 1 / 6
    dig_offset = 2 / 6 - 0.02
    for i in range(len(candidates[1])):
        clr = gray
        if i == candidates[0]:
            clr = selected
        x_digit = ((candidates[1][i] - 1) // 3)
        y_digit = ((candidates[1][i] - 1) % 3)
        #X = x + dig_offset * x_digit
        #Y = y + dig_offset * y_digit
        ax.text(
           x + cell_offset + dig_offset * x_digit, 
           y + cell_offset + dig_offset * y_digit, 
            str(candidates[1][i]), 
            fontsize=10, 
            ha='center', va='center',
            color=clr
        )
        ax.plot()
    
def __fillGrid(grid: tuple[int, list[list[int]]], i=-1):
    if i >= 0:
        p = (i//9, i%9)
        __drawBox(p, (p[0]+1,p[1]+1),color=selected,w=4)
    for r in range(9):
        for c in range(9):
            if type(grid[r][c]) is int:
                __drawSolvedDigit(r, c, grid[r][c])
            elif type(grid[r][c]) is tuple:
                if (r*9+c < i):
                    __drawSolvedDigit(r, c, grid[r][c][1][grid[r][c][0]], color=temp)
                elif (r*9+c == i):
                    __drawCandidates(r, c, grid[r][c])

def drawGrid(grid: list[list[int]], i=-1):
    __resetAx()
    __drawSudokuFrame()
    __fillGrid(grid, i)
    plt.pause(0.001)

def keepOpen():
    plt.show(block=True)


"""
[mod]   030450000684000027095028030000000703000000906007006250000860100900000800070504092
[#1]    132457689684193527795628431469285713258371946317946258523869174941732865876514392
[#2]    132457689684193527795628431469285713258731946317946258523869174941372865876514392
[#3]    132457689684193527795628431469285713528371946317946258243869175951732864876514392
[#4]    132457689684193527795628431469285713528371946317946258253869174941732865876514392
[#5]    132457689684193527795628431469285713528731946317946258243869175951372864876514392
[#6]    132457689684193527795628431469285713528731946317946258253869174941372865876514392
[#7]    132457689684193527795628431569281743248375916317946258423869175951732864876514392
[#8]    132457689684193527795628431569281743248735916317946258423869175951372864876514392
[#9]    132457689684193527795628431569281743328745916417936258243869175951372864876514392
[#10]   132457689684193527795628431569281743328745916417936258253869174941372865876514392
[#11]   132457689684193527795628431569281743428375916317946258243869175951732864876514392
[#12]   132457689684193527795628431569281743428375916317946258253869174941732865876514392
[#13]   132457689684193527795628431569281743428735916317946258243869175951372864876514392
[#14]   132457689684193527795628431569281743428735916317946258253869174941372865876514392
[#15]   132457689684391527795628431269185743358742916417936258523869174941273865876514392
[#16]   132457689684391527795628431269185743458273916317946258523869174941732865876514392
[#17]   132457689684391527795628431269185743458732916317946258523869174941273865876514392
[#18]   132457689684391527795628431269185743548273916317946258423869175951732864876514392
[#19]   132457689684391527795628431269185743548732916317946258423869175951273864876514392
[#20]   132457689684391527795628431469285713258173946317946258523869174941732865876514392
[#21]   132457689684391527795628431469285713528173946317946258243869175951732864876514392
[#22]   132457689684391527795628431469285713528173946317946258253869174941732865876514392
[#23]   132457689684391527795628431569182743248735916317946258423869175951273864876514392
[#24]   132457689684391527795628431569182743328745916417936258243869175951273864876514392
[#25]   132457689684391527795628431569182743328745916417936258253869174941273865876514392
[#26]   132457689684391527795628431569182743428735916317946258243869175951273864876514392
[#27]   132457689684391527795628431569182743428735916317946258253869174941273865876514392
[#28]   132457689684931527795628431269185743358742916417396258523869174941273865876514392
[#29]   132457689684931527795628431569182743328745916417396258243869175951273864876514392
[#30]   132457689684931527795628431569182743328745916417396258253869174941273865876514392
"""